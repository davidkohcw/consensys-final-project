// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokensPurchased extends ethereum.Event {
  get params(): TokensPurchased__Params {
    return new TokensPurchased__Params(this);
  }
}

export class TokensPurchased__Params {
  _event: TokensPurchased;

  constructor(event: TokensPurchased) {
    this._event = event;
  }

  get purchaser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InfiniteCrowdsale extends ethereum.SmartContract {
  static bind(address: Address): InfiniteCrowdsale {
    return new InfiniteCrowdsale("InfiniteCrowdsale", address);
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wallet(): Address {
    let result = super.call("wallet", "wallet():(address)", []);

    return result[0].toAddress();
  }

  try_wallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("wallet", "wallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rate(): BigInt {
    let result = super.call("rate", "rate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rate", "rate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weiRaised(): BigInt {
    let result = super.call("weiRaised", "weiRaised():(uint256)", []);

    return result[0].toBigInt();
  }

  try_weiRaised(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weiRaised", "weiRaised():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get wallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BuyTokensCall extends ethereum.Call {
  get inputs(): BuyTokensCall__Inputs {
    return new BuyTokensCall__Inputs(this);
  }

  get outputs(): BuyTokensCall__Outputs {
    return new BuyTokensCall__Outputs(this);
  }
}

export class BuyTokensCall__Inputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuyTokensCall__Outputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }
}
